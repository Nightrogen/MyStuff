#Choose the players (done)
#Create the board (done)
#Choose the starting player (done)
#Until someone wins, check for a winner (done)
#   show the board (done)
#   choose a location, mark it (done)
#   toggle active player

#Game over, active player won!

def main():
    #CREATE THE BOARD
    #Board is a list of rows
    #Rows are a list of cells
    board = [
        [None, None, None],
        [None, None, None],
        [None, None, None]
    ]
    #CHOOSE INITIAL PLAYER
    active_player_index = 0
    players = ["Player1", "Player2"]
    symbols = ["X", "O"]
    player = players[active_player_index]

    #UNTIL SOMEONE WINS
    while not find_winner(board):
        #SHOW THE BOARD
        player = players[active_player_index]
        symbol = symbols[active_player_index]

        announce_turn(player)
        show_board(board)
        if not choose_location(board, symbol):
            print("That isn't an option! Try again! ")
            continue

        # TOGGLE ACTIVE PLAYER
        active_player_index = (active_player_index +1) % len(players)

    print(f"Game Over! {player} has won with the board: ")
    show_board(board)


def choose_location(board, symbol):
    row = int(input("Choose which row:"))
    column = int(input("Choose which column:"))

    row -= 1
    column -= 1
    if row < 0 or row > len(board):
        return False
    if column < 0 or column > len(board[0]):
        return False

    cell = board[row][column]
    if cell is not None:
        return False

    board[row][column] = symbol
    return True

def show_board(board):
    for row in board:
        print("| ", end='')
        for cell in row:
            symbol = cell if cell is not None else "_"
            print(symbol, end="  |  ")
        print()

def announce_turn(player):
    print()
    print(f"It's {player}'s turn. Here's the board:")
    print()

def find_winner(board):
    # Win by rows
    rows = board
    for row in rows:
        symbol1 = row[0]
        if symbol1 and all(symbol1 == cell for cell in row):
            return True

    # Win by columns
    columns = []
    for col_idx in range(0, 3):
        col = [
            board[0][col_idx],
            board[1][col_idx],
            board[2][col_idx],
        ]
        columns.append(col)

    for col in columns:
        symbol1 = col[0]
        if symbol1 and all(symbol1 == cell for cell in col):
            return True


    # Win by diagonals
    diagonals = [
        [board[0][0], board[1][1], board[2][2]],
        [board[0][2], board[1][1], board[2][0]],
    ]

    for dia in diagonals:
        symbol1 = dia[0]
        if symbol1 and all(symbol1 == cell for cell in dia):
            return True

    return False


if __name__ == '__main__':
    main()
